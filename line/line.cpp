// Code generated by Stan version 1.0

#include <stan/model/model_header.hpp>

namespace line_namespace {

using std::vector;
using std::string;
using std::stringstream;
using stan::agrad::var;
using stan::model::prob_grad_ad;
using stan::math::get_base1;
using stan::math::stan_print;
using stan::io::dump;
using std::istream;
using namespace stan::math;
using namespace stan::prob;
using namespace stan::agrad;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;
typedef Eigen::Matrix<stan::agrad::var,Eigen::Dynamic,1> vector_v;
typedef Eigen::Matrix<stan::agrad::var,1,Eigen::Dynamic> row_vector_v;
typedef Eigen::Matrix<stan::agrad::var,Eigen::Dynamic,Eigen::Dynamic> matrix_v;

class line : public prob_grad_ad {
private:
    int N;
    vector<double> y;
    vector<double> x;
    double x_mean;
    vector<double> x_center;
public:
    line(stan::io::var_context& context__,        std::ostream* pstream__ = 0)
        : prob_grad_ad::prob_grad_ad(0) {
        static const char* function__ = "line_namespace::line(%1%)";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        N = int(0);
        if (!context__.contains_i("N"))
            throw std::runtime_error("variable N not found.");
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        y = std::vector<double>(N,double(0));
        if (!context__.contains_r("y"))
            throw std::runtime_error("variable y not found.");
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_r__[pos__++];
        }
        x = std::vector<double>(N,double(0));
        if (!context__.contains_r("x"))
            throw std::runtime_error("variable x not found.");
        vals_r__ = context__.vals_r("x");
        pos__ = 0;
        size_t x_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
            x[i_0__] = vals_r__[pos__++];
        }
        // validate data
        check_greater_or_equal(function__,N,1,"N");
        x_mean = double(0);
        x_center = std::vector<double>(N,double(0));

        assign(x_mean, mean(x));
        for (int n = 1; n <= N; ++n) {
            assign(get_base1(x_center,n,"x_center",1), (get_base1(x,n,"x",1) - x_mean));
        }
        // validate transformed data

        set_param_ranges();
    } // dump ctor

    void set_param_ranges() {
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    void transform_inits(const stan::io::var_context& var_context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__) {
        params_r__.clear();
        params_i__.clear();
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;


        if (!(var_context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        if (var_context__.dims_r("alpha").size() != 0)
            throw std::runtime_error("require 0 dimensions for variable alpha");
        vals_r__ = var_context__.vals_r("alpha");
        pos__ = 0U;
        double alpha(0);
        alpha = vals_r__[pos__++];
        writer__.scalar_unconstrain(alpha);

        if (!(var_context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        if (var_context__.dims_r("beta").size() != 0)
            throw std::runtime_error("require 0 dimensions for variable beta");
        vals_r__ = var_context__.vals_r("beta");
        pos__ = 0U;
        double beta(0);
        beta = vals_r__[pos__++];
        writer__.scalar_unconstrain(beta);

        if (!(var_context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        if (var_context__.dims_r("sigma").size() != 0)
            throw std::runtime_error("require 0 dimensions for variable sigma");
        vals_r__ = var_context__.vals_r("sigma");
        pos__ = 0U;
        double sigma(0);
        sigma = vals_r__[pos__++];
        writer__.scalar_lb_unconstrain(0,sigma);
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    var log_prob(vector<var>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) {

        var lp__(0.0);
        // model parameters
        stan::io::reader<var> in__(params_r__,params_i__);

        var alpha = in__.scalar_constrain(lp__);
        var beta = in__.scalar_constrain(lp__);
        var sigma = in__.scalar_lb_constrain(0,lp__);

        // transformed parameters

        // initialized transformed params to avoid seg fault on val access
        var INIT_DUMMY__(std::numeric_limits<double>::quiet_NaN());


        // validate transformed parameters

        // model body
        {
            vector<var> mu(N);
            for (int n = 1; n <= N; ++n) {
                assign(get_base1(mu,n,"mu",1), (alpha + (beta * get_base1(x_center,n,"x_center",1))));
            }
            lp__ += stan::prob::normal_log<true>(y, mu, sigma);
            lp__ += stan::prob::cauchy_log<true>(alpha, 0, 2.5);
            lp__ += stan::prob::cauchy_log<true>(beta, 0, 2.5);
            lp__ += stan::prob::cauchy_log<true>(sigma, 0, 2.5);
            if (sigma < 0) lp__ -= std::numeric_limits<double>::infinity();
            else lp__ -= log1m(cauchy_cdf(0, 0, 2.5));
        }

        return lp__;

    } // log_prob()


    void get_param_names(std::vector<std::string>& names__) {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("sigma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    void write_array(std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     std::ostream* pstream__ = 0) {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "line_namespace::write_array(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double alpha = in__.scalar_constrain();
        double beta = in__.scalar_constrain();
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha);
        vars__.push_back(beta);
        vars__.push_back(sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning


        // validate transformed parameters

        // write transformed parameters

        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
    }


    void write_csv_header(std::ostream& o__) {
        stan::io::csv_writer writer__(o__);
        writer__.comma();
        o__ << "alpha";
        writer__.comma();
        o__ << "beta";
        writer__.comma();
        o__ << "sigma";
        writer__.newline();
    }

    void write_csv(std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__,
                   std::ostream* pstream__ = 0) {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        static const char* function__ = "line_namespace::write_csv(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double alpha = in__.scalar_constrain();
        writer__.write(alpha);
        double beta = in__.scalar_constrain();
        writer__.write(beta);
        double sigma = in__.scalar_lb_constrain(0);
        writer__.write(sigma);

        // declare, define and validate transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning



        // write transformed parameters

        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
        writer__.newline();
    }

}; // model

} // namespace

int main(int argc, const char* argv[]) {
    try {
        stan::gm::nuts_command<line_namespace::line>(argc,argv);
    } catch (std::exception& e) {
        std::cerr << std::endl << "Exception: " << e.what() << std::endl;
        std::cerr << "Diagnostic information: " << std::endl << boost::diagnostic_information(e) << std::endl;
        return -1;
    }
}

